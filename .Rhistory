n_cols <- min(n_vars, max_cols)
# Combine with patchwork
combined_plot <- wrap_plots(plot_list, ncol = n_cols) +
plot_annotation(
title = title,
subtitle = subtitle,
theme = theme(
plot.title = element_text(face = "bold", size = text_size + 2, hjust = 0),
plot.subtitle = element_text(size = text_size - 2, hjust = 0, color = "gray40")
)
)
return(combined_plot)
}
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
p <- plot_trace_dashboard_facet(
trace_file = trace,
title      = paste("Dynamics of", s$name),
subtitle   = paste0("From '", s$name, "'"),
ylab       = "Marking",
xlab       = "Time",
just_X1    = T,
palette    = "Dark2",
max_cols   = 3
)
max(filter(trace_long, Variable == "X1"), na.rm = TRUE)
filter(trace_long, Variable == "X1")
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(patchwork)
plot_trace_dashboard_facet <- function(trace_file,
title = "Dynamical Simulation",
subtitle = NULL,
ylab = "Value",
xlab = "Time",
line_size = 1.2,
text_size = 14,
palette = "Set1",
just_X1,
max_cols = 4) {
trace <- read.table(trace_file, header = TRUE, sep = "", dec = ".")
if (!"Time" %in% colnames(trace)) stop("First column must be 'Time'")
trace_long <- trace %>%
pivot_longer(cols = -Time, names_to = "Variable", values_to = "Value")
variables <- unique(trace_long$Variable)
n_vars <- length(variables)
y_max <- max(trace_long$Value, na.rm = TRUE)
# Setup color palette
base_colors <- if (n_vars <= 8) {
brewer.pal(n = max(3, n_vars), name = palette)
} else {
colorRampPalette(brewer.pal(8, palette))(n_vars)
}
if(just_X1) {
variables = "X1"
n_vars <- length(variables)
y_max <- max(filter(trace_long, Variable == "X1")$Value, na.rm = TRUE)
}
# Build individual plots
plot_list <- lapply(seq_along(variables), function(i) {
v <- variables[i]
df <- filter(trace_long, Variable == v)
ggplot(df, aes(x = Time, y = Value)) +
geom_area(fill = base_colors[i], alpha = 0.1) +
geom_line(color = base_colors[i], linewidth = line_size) +
ylim(NA, y_max) +
labs(title = v, x = xlab, y = ylab) +
theme_minimal(base_size = text_size) +
theme(
plot.title = element_text(face = "bold", size = text_size, hjust = 0.5),
axis.title = element_text(color = "#444444"),
axis.text = element_text(color = "#444444"),
panel.grid.major = element_line(color = "gray85", linewidth = 0.3),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "#f8f9fa", color = NA)
)
})
# Determine layout
n_cols <- min(n_vars, max_cols)
# Combine with patchwork
combined_plot <- wrap_plots(plot_list, ncol = n_cols) +
plot_annotation(
title = title,
subtitle = subtitle,
theme = theme(
plot.title = element_text(face = "bold", size = text_size + 2, hjust = 0),
plot.subtitle = element_text(size = text_size - 2, hjust = 0, color = "gray40")
)
)
return(combined_plot)
}
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
p <- plot_trace_dashboard_facet(
trace_file = trace,
title      = paste("Dynamics of", s$name),
subtitle   = paste0("From '", s$name, "'"),
ylab       = "Marking",
xlab       = "Time",
just_X1    = T,
palette    = "Dark2",
max_cols   = 3
)
p
cat(">>> Processing:", s$name, "...\n")
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"DockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
do.call(model.analysis, ana_args)
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
p <- plot_trace_dashboard_facet(
trace_file = trace,
title      = paste("Dynamics of", s$name),
subtitle   = paste0("From '", s$name, "'"),
ylab       = "Marking",
xlab       = "Time",
just_X1    = T,
palette    = "Dark2",
max_cols   = 3
)
p
s = cfg$settings[[2]]
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
do.call(model.analysis, ana_args)
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
p <- plot_trace_dashboard_facet(
trace_file = trace,
title      = paste("Dynamics of", s$name),
subtitle   = paste0("From '", s$name, "'"),
ylab       = "Marking",
xlab       = "Time",
just_X1    = T,
palette    = "Dark2",
max_cols   = 3
)
p
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"DockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
library(yaml)
library(epimod)
# downloadContainers()
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
# load config
cfg <- yaml::read_yaml("config.yml")
# s = cfg$settings[[2]]
for (s in cfg$settings) {
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
do.call(model.analysis, ana_args)
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
p <- plot_trace_dashboard_facet(
trace_file = trace,
title      = paste("Dynamics of", s$name),
subtitle   = paste0("From '", s$name, "'"),
ylab       = "Marking",
xlab       = "Time",
just_X1    = T,
palette    = "Dark2",
max_cols   = 3
)
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics.pdf")), p,
height = 2.5, width = 2.5)
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"DockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
}
View(plot_trace_dashboard_facet)
p <- plot_trace_dashboard_facet(
trace_file = trace,
title      = paste("Dynamics of", s$name),
subtitle   = paste0("From '", s$name, "'"),
ylab       = "Marking",
xlab       = "Time",
just_X1    = T,
text_size  = 9,
palette    = "Dark2",
max_cols   = 3
)
library(yaml)
library(epimod)
# downloadContainers()
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
# load config
cfg <- yaml::read_yaml("config.yml")
s = cfg$settings[[2]]
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
do.call(model.analysis, ana_args)
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
p <- plot_trace_dashboard_facet(
trace_file = trace,
title      = paste("Dynamics of", s$name),
subtitle   = paste0("From '", s$name, "'"),
ylab       = "Marking",
xlab       = "Time",
just_X1    = T,
text_size  = 9,
palette    = "Dark2",
max_cols   = 3
)
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics.pdf")), p,
height = 2.5, width = 2.5)
library(ggplot2)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(patchwork)
plot_trace_dashboard_facet <- function(trace_file,
title = "Dynamical Simulation",
subtitle = NULL,
ylab = "Value",
xlab = "Time",
line_size = 1.2,
text_size,
palette = "Set1",
just_X1,
max_cols = 3) {
trace <- read.table(trace_file, header = TRUE, sep = "", dec = ".")
if (!"Time" %in% colnames(trace)) stop("First column must be 'Time'")
trace_long <- trace %>%
pivot_longer(cols = -Time, names_to = "Variable", values_to = "Value")
variables <- unique(trace_long$Variable)
n_vars <- length(variables)
y_max <- max(trace_long$Value, na.rm = TRUE)
# Setup color palette
base_colors <- if (n_vars <= 8) {
brewer.pal(n = max(3, n_vars), name = palette)
} else {
colorRampPalette(brewer.pal(8, palette))(n_vars)
}
if(just_X1) {
variables = "X1"
n_vars <- length(variables)
y_max <- max(filter(trace_long, Variable == "X1")$Value, na.rm = TRUE)
}
# Build individual plots
plot_list <- lapply(seq_along(variables), function(i) {
v <- variables[i]
df <- filter(trace_long, Variable == v)
ggplot(df, aes(x = Time, y = Value)) +
geom_area(fill = base_colors[i], alpha = 0.1) +
geom_line(color = base_colors[i], linewidth = line_size) +
ylim(NA, y_max) +
labs(title = v, x = xlab, y = ylab) +
theme_minimal(base_size = text_size) +
theme(
plot.title = element_text(face = "bold", size = text_size, hjust = 0.5),
axis.title = element_text(color = "#444444"),
axis.text = element_text(color = "#444444"),
panel.grid.major = element_line(color = "gray85", linewidth = 0.3),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "#f8f9fa", color = NA)
)
})
# Determine layout
n_cols <- min(n_vars, max_cols)
# Combine with patchwork
combined_plot <- wrap_plots(plot_list, ncol = n_cols) +
plot_annotation(
title = title,
subtitle = subtitle,
theme = theme(
plot.title = element_text(face = "bold", size = text_size, hjust = 0),
plot.subtitle = element_text(size = text_size, hjust = 0, color = "gray40")
)
)
return(combined_plot)
}
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
do.call(model.analysis, ana_args)
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
p <- plot_trace_dashboard_facet(
trace_file = trace,
title      = paste("Dynamics of", s$name),
subtitle   = paste0("From '", s$name, "'"),
ylab       = "Marking",
xlab       = "Time",
just_X1    = T,
text_size  = 7,
palette    = "Dark2",
max_cols   = 3
)
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics.pdf")), p,
height = 2.5, width = 2.5)
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
do.call(model.analysis, ana_args)
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
p <- plot_trace_dashboard_facet(
trace_file = trace,
title      = paste("Dynamics of", s$name),
subtitle   = paste0("From '", s$name, "'"),
ylab       = "Marking",
xlab       = "Time",
just_X1    = T,
text_size  = 8.5,
line_size = 0.75,
palette    = "Dark2",
max_cols   = 3
)
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics.pdf")), p,
height = 2.5, width = 2.5)
library(yaml)
library(epimod)
# downloadContainers()
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
# load config
cfg <- yaml::read_yaml("config.yml")
# s = cfg$settings[[2]]
for (s in cfg$settings) {
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
do.call(model.analysis, ana_args)
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
p <- plot_trace_dashboard_facet(
trace_file = trace,
title      = paste("Dynamics of", s$name),
subtitle   = paste0("From '", s$name, "'"),
ylab       = "Marking",
xlab       = "Time",
just_X1    = T,
text_size  = 8.5,
line_size = 0.75,
palette    = "Dark2",
max_cols   = 3
)
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics.pdf")), p,
height = 2.5, width = 2.5)
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"DockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
}
