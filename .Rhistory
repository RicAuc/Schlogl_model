wd = getwd()
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[1])
net_name
nets_list = list.files(file.path(wd, "net"))
nets_list
file.path(wd, "net")
setwd("~/Git_Repositories/Schlogl_model")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[1])
net_name
nets_list
list.files(file.path(wd, "net"))
file.path(wd, "net")
wd = getwd()
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[1])
net_name
gsub(".PNPRO", "", nets_list[2])
wd = getwd()
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[2])
solver_dir = paste0(input_dir, "/", net_name)
solver_dir
input_dir = file.path(wd, "input")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[2])
solver_dir = paste0(input_dir, "/", net_name)
solver_dir
if( !dir.exists(solver_dir) ) {
dir.create(solver_dir)
}
net_name
file.path(wd, "functions", "Schlogl_general_functions.cpp")
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")),
transitions_fname = file.path(wd, "functions", "Schlogl_general_functions.cpp"))
library(epimod)
wd = getwd()
input_dir = file.path(wd, "input")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[2])
solver_dir = paste0(input_dir, "/", net_name)
if( !dir.exists(solver_dir) ) {
dir.create(solver_dir)
}
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")),
transitions_fname = file.path(wd, "functions", "Schlogl_general_functions.cpp"))
Rcpp::sourceCpp("functions/Schlogl_general_functions.cpp")
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")),
transitions_fname = file.path(wd, "functions", "Schlogl_general_functions.cpp"))
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")),
transitions_fname = file.path(wd, "functions", "Schlogl_general_functions.cpp"))
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")),
transitions_fname = file.path(wd, "functions", "Schlogl_general_functions.cpp"))
files_to_move <- list.files(pattern = net_name, full.names = F)
files_to_move
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(solver_dir, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
file.path(solver_dir, paste0(net_name, ".solver"))
init.gen <- function() {
# places' names
yini.names <- "X1"
# initial marking
y_ini <- c(250)
names(y_ini) <- yini.names
y_ini = y_ini[yini.names]
return(y_ini)
}
init.gen()
file.path(wd, "input/", net_name)
file.path(wd, "input", net_name, "initData.csv")
source("~/Git_Repositories/Schlogl_model/main.r", echo=TRUE)
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = file.path(wd, "input", net_name, "initData.csv"),
functions_fname = file.append(wd, "functions/Schlogl_general_Rfunctions.R"),
debug = T,
f_time = 100,
s_time = 1,
i_time = 0,
user_files = file.path(wd, "input", net_name, "Kinetics_Parameters"))
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = file.path(wd, "input", net_name, "initData.csv"),
functions_fname = file.path(wd, "functions/Schlogl_general_Rfunctions.R"),
debug = T,
f_time = 100,
s_time = 1,
i_time = 0,
user_files = file.path(wd, "input", net_name, "Kinetics_Parameters"))
file.path(solver_dir, paste0(net_name, ".solver")
file.path(solver_dir, paste0(net_name, ".solver")
)
net_name
net_name = gsub(".PNPRO", "", nets_list[2])
net_name
nets_list
wd = getwd()
input_dir = file.path(wd, "input")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[2])
solver_dir = paste0(input_dir, "/", net_name)
if( !dir.exists(solver_dir) ) {
dir.create(solver_dir)
}
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")),
transitions_fname = file.path(wd, "functions", "Schlogl_general_functions.cpp"))
files_to_move <- list.files(pattern = net_name, full.names = F)
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(solver_dir, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = file.path(wd, "input", net_name, "initData.csv"),
functions_fname = file.path(wd, "functions/Schlogl_general_Rfunctions.R"),
debug = T,
f_time = 100,
s_time = 1,
i_time = 0,
user_files = file.path(wd, "input", net_name, "Kinetics_Parameters"))
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = file.path(wd, "input", net_name, "initData.csv"),
functions_fname = file.path(wd, "functions/Schlogl_general_Rfunctions.R"),
debug = F,
f_time = 100,
s_time = 1,
i_time = 0)
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")),
transitions_fname = file.path(wd, "functions", "Schlogl_general_functions.cpp"))
files_to_move <- list.files(pattern = net_name, full.names = F)
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(solver_dir, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = file.path(wd, "input", net_name, "initData.csv"),
functions_fname = file.path(wd, "functions/Schlogl_general_Rfunctions.R"),
debug = T,
f_time = 100,
s_time = 1,
i_time = 0,
user_files = file.path(wd, "input", net_name, "Kinetics_Parameters"))
nets_list
net_name = gsub(".PNPRO", "", nets_list[3])
net_name
