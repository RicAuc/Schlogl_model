plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
cfg <- yaml::read_yaml("config.yml")
save_ref = FALSE
s = cfg$settings[[11]]
s
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
f_time = 50; s_time = 1; i_time = 0
nodes = 2
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
# debug          = FALSE,
f_time         = f_time,
s_time         = s_time,
i_time         = i_time
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
if(s$SSA){
ana_args$solver_type = "SSA"
ana_args$parallel_processors = detectCores()
ana_args$n_run = ana_args$parallel_processors*nodes
}
if (s$sensitivity) {
ana_args$parallel_processors = detectCores()
ana_args$n_config = ana_args$parallel_processors*nodes
ana_args$reference_data = "input/upper_stable_state.csv"
ana_args$distance_measure = "msqd"
ana_args$target_value = "target"
do.call(model.sensitivity, ana_args)
} else {
do.call(model.analysis, ana_args)
}
p = plot_stochastics(f_time, s_time, i_time,
title = paste("Dynamics of", s$name, "solver: SSA"),
subtitle = paste0("From '", s$name, "'", " - n_run: ", ana_args$n_run),
axis_title_size = 8,
axis_text_size = 8,
title_size = 9,
subtitle_size = 9)
p
if(s$SSA) {
p = plot_stochastics(f_time, s_time, i_time,
title = paste("Dynamics of", s$name, "solver: SSA"),
subtitle = paste0("From '", s$name, "'", " - n_run: ", ana_args$n_run),
axis_title_size = 8,
axis_text_size = 8,
title_size = 9,
subtitle_size = 9)
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics", "_SSA_",".pdf")), p,
height = 3, width = 4)
}
if (s$sensitivity) {
list_sens_results <- plot_sensitivity(
title            = "Sensitivity Analysis",
subtitle         = "Sensitivity Analysis Subtitle",
axis_title_size  = 8,
axis_text_size   = 8,
title_size       = 9,
subtitle_size    = 9
)
}
!s$SSA
!s$SSA
if( !s$SSA ) {
p <- plot_trace_dashboard_facet(
trace_file = file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace")),
title      = paste("Dynamics of", s$name),
subtitle   = paste0("From '", s$name, "'"),
ylab       = "Marking",
xlab       = "Time",
just_X1    = TRUE,
text_size  = 8.5,
line_size  = 0.75,
palette    = "Dark2",
max_cols   = 3)
if(save_ref) {
trace <- read.table(
file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace")),
header = TRUE, sep = "", dec = ".")
write.table(trace, file = file.path(wd, "input", "upper_stable_state.csv"),
sep=",", col.names=FALSE, row.names = FALSE)
}
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics.pdf")), p,
height = 2.5, width = 2.5)
}
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"dockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
library(yaml)
library(epimod)
# downloadContainers()
library(parallel)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
cfg <- yaml::read_yaml("config.yml")
save_ref = FALSE
s = cfg$settings[[11]]
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
f_time = 50; s_time = 1; i_time = 0
nodes = 100
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
# debug          = FALSE,
f_time         = f_time,
s_time         = s_time,
i_time         = i_time
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
if(s$SSA){
ana_args$solver_type = "SSA"
ana_args$parallel_processors = detectCores()
ana_args$n_run = ana_args$parallel_processors*nodes
}
if (s$sensitivity) {
ana_args$parallel_processors = detectCores()
ana_args$n_config = ana_args$parallel_processors*nodes
ana_args$reference_data = "input/upper_stable_state.csv"
ana_args$distance_measure = "msqd"
ana_args$target_value = "target"
do.call(model.sensitivity, ana_args)
} else {
do.call(model.analysis, ana_args)
}
if(s$SSA) {
p = plot_stochastics(f_time, s_time, i_time,
title = paste("Dynamics of", s$name, "solver: SSA"),
subtitle = paste0("From '", s$name, "'", " - n_run: ", ana_args$n_run),
axis_title_size = 8,
axis_text_size = 8,
title_size = 9,
subtitle_size = 9)
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics", "_SSA_",".pdf")), p,
height = 3, width = 4)
}
p = plot_stochastics(f_time, s_time, i_time,
title = paste("Dynamics of", s$name, "solver: SSA"),
subtitle = paste0("From '", s$name, "'", " - n_run: ", ana_args$n_run),
axis_title_size = 8,
axis_text_size = 8,
title_size = 9,
subtitle_size = 9)
p
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics", "_SSA_",".pdf")), p,
height = 3, width = 4)
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"dockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
library(yaml)
library(epimod)
# downloadContainers()
library(parallel)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
cfg <- yaml::read_yaml("config.yml")
save_ref = FALSE
s = cfg$settings[[12]]
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
f_time = 50; s_time = 1; i_time = 0
nodes = 2
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
debug          = FALSE,
f_time         = f_time,
s_time         = s_time,
i_time         = i_time
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
s$SSA
if( s$SSA ) {
ana_args$solver_type = "SSA"
ana_args$parallel_processors = detectCores()
ana_args$n_run = ana_args$parallel_processors*nodes
}
s$sensitivity
!s$calibration
!s$SSA && !s$calibration
if (s$calibration) {
ana_args$parallel_processors = detectCores()
ana_args$n_config = ana_args$parallel_processors*nodes
ana_args$reference_data = "input/upper_stable_state.csv"
ana_args$distance_measure = "msqd"
ana_args$ini_v = c(248, 0.06, 0.0005, 300, 5)
ana_args$ub_v = c(250, 0.08, 0.0002, 800, 8)
ana_args$lb_v = c(247, 0.02, 0.00001, 100, 2)
ana_args$max.time = 1
do.call(model.calibration, ana_args)
} else {
do.call(model.analysis, ana_args)
}
ana_args
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
f_time = 50; s_time = 1; i_time = 0
nodes = 2
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
# debug          = TRUE,
debug          = FALSE,
f_time         = f_time,
s_time         = s_time,
i_time         = i_time
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
if( s$SSA ) {
ana_args$solver_type = "SSA"
ana_args$parallel_processors = detectCores()
ana_args$n_run = ana_args$parallel_processors*nodes
}
s$calibration
ana_args$parallel_processors = detectCores()
ana_args$n_config = ana_args$parallel_processors*nodes
ana_args$reference_data = "input/upper_stable_state.csv"
ana_args$distance_measure = "msqd"
ana_args$ini_v = c(248, 0.06, 0.0005, 300, 5)
ana_args$ub_v = c(250, 0.08, 0.0002, 800, 8)
ana_args$lb_v = c(247, 0.02, 0.00001, 100, 2)
ana_args$max.time = 1
ana_args
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
# debug          = TRUE,
debug          = FALSE,
f_time         = f_time,
s_time         = s_time,
i_time         = i_time
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
if( s$SSA ) {
ana_args$solver_type = "SSA"
ana_args$parallel_processors = detectCores()
ana_args$n_run = ana_args$parallel_processors*nodes
}
ana_args$parallel_processors = detectCores()
ana_args$reference_data = "input/upper_stable_state.csv"
ana_args$distance_measure = "msqd"
ana_args$ini_v = c(248, 0.06, 0.0005, 300, 5)
ana_args$ub_v = c(250, 0.08, 0.0002, 800, 8)
ana_args$lb_v = c(247, 0.02, 0.00001, 100, 2)
ana_args$max.time = 1
do.call(model.calibration, ana_args)
ana_args$parallel_processors = detectCores()
ana_args$reference_data = "input/upper_stable_state.csv"
ana_args$distance_measure = "msqd"
ana_args$ini_v = c(248, 0.06, 0.00015, 300, 5)
ana_args$ub_v = c(250, 0.08, 0.0002, 800, 8)
ana_args$lb_v = c(247, 0.02, 0.00001, 100, 2)
ana_args$max.time = 1
do.call(model.calibration, ana_args)
ana_args$parallel_processors = detectCores()
ana_args$reference_data = "input/upper_stable_state.csv"
ana_args$distance_measure = "msqd"
ana_args$ini_v = c(248, 0.06, 0.00015, 300, 5)
ana_args$ub_v = c(250, 0.08, 0.0002, 800, 8)
ana_args$lb_v = c(247, 0.02, 0.00001, 100, 2)
ana_args$max.time = 1
do.call(model.calibration, ana_args)
ana_args$parallel_processors = detectCores()
ana_args$reference_data = "input/upper_stable_state.csv"
ana_args$distance_measure = "msqd"
ana_args$ini_v = c(248, 0.06, 0.00015, 300, 5)
ana_args$ub_v = c(250, 0.08, 0.0002, 800, 8)
ana_args$lb_v = c(247, 0.02, 0.00001, 100, 2)
ana_args$max.time = 1
do.call(model.calibration, ana_args)
ana_args$parallel_processors = detectCores()
ana_args$reference_data = "input/upper_stable_state.csv"
ana_args$distance_measure = "msqd"
ana_args$ini_v = c(248, 0.06, 0.00015, 300, 5)
ana_args$ub_v = c(250, 0.08, 0.0002, 800, 8)
ana_args$lb_v = c(247, 0.02, 0.00001, 100, 2)
ana_args$max.time = 1
do.call(model.calibration, ana_args)
ana_args$parallel_processors = detectCores()
ana_args$reference_data = "input/upper_stable_state.csv"
ana_args$distance_measure = "msqd"
ana_args$ini_v = c(248, 0.06, 0.00015, 300, 5)
ana_args$ub_v = c(250, 0.08, 0.0002, 800, 8)
ana_args$lb_v = c(247, 0.02, 0.00001, 100, 2)
ana_args$max.time = 1
do.call(model.calibration, ana_args)
ana_args$parallel_processors = detectCores()
ana_args$reference_data = "input/upper_stable_state.csv"
ana_args$distance_measure = "msqd"
ana_args$ini_v = c(248, 0.06, 0.00015, 300, 5)
ana_args$ub_v = c(250, 0.08, 0.0002, 800, 8)
ana_args$lb_v = c(247, 0.02, 0.00001, 100, 2)
ana_args$max.time = 1
do.call(model.calibration, ana_args)
s$name
results_dir    = "extended_calibration_calibration"
reference_file = "input/reference_data.csv"
optim_trace    = "extended_calibration_calibration/extended_calibration-calibration_optim-config.csv"
output_plot    = "plots/calibration_trajectories.pdf"
# —— 1. Load reference trajectory & optimization trace ——
reference_df <- read_csv(reference_file, col_names = FALSE) %>%
transmute(Time = X1 / time_scale,
X1   = X2)
read.table(reference_file, col_names = FALSE)
read.table(reference_file)
reference_file = "input/upper_stable_state.csv"
read.table(reference_file)
read.table(reference_file, header = T)
# —— 1. Load reference trajectory & optimization trace ——
reference_df <- read.table(reference_file, header = T)
head(reference_df)
# —— 1. Load reference trajectory & optimization trace ——
reference_df <- read.table(reference_file, header = F)
head(reference_df)
optim_trace
optim_params <- read.table(optim_trace)
optim_params
optim_params <- read.table(optim_trace, header = T)
head(optim_params)
View(optim_params)
# —— 2. Helper: read a single .trace file and tag by error distance ——
read_trace <- function(id) {
trace_file <- file.path(
results_dir,
str_c("extended_calibration-calibration-", id, ".trace")
)
df <- read_csv(trace_file)
dist <- optim_params %>% filter(id == !!id) %>% pull(distance)
df %>% mutate(
Time     = Time / time_scale,
Distance = dist
)
}
View(read_trace)
# —— 3. Read and combine all traces ——
all_traces <- optim_params$id %>%
map_dfr(read_trace)
# —— 3. Read and combine all traces ——
all_traces <- optim_params$id %>%
purrr::map_dfr(read_trace)
# —— 2. Helper: read a single .trace file and tag by error distance ——
read_trace <- function(id) {
trace_file <- file.path(
results_dir,
stringr::str_c("extended_calibration-calibration-", id, ".trace")
)
df <- read_csv(trace_file)
dist <- optim_params %>% filter(id == !!id) %>% pull(distance)
df %>% mutate(
Time     = Time / time_scale,
Distance = dist
)
}
# —— 3. Read and combine all traces ——
all_traces <- optim_params$id %>%
purrr::map_dfr(read_trace)
# —— 2. Helper: read a single .trace file and tag by error distance ——
read_trace <- function(id) {
trace_file <- file.path(
results_dir,
stringr::str_c("extended_calibration-calibration-", id, ".trace")
)
df <- read.table(trace_file)
dist <- optim_params %>% filter(id == !!id) %>% pull(distance)
df %>% mutate(
Time     = Time / time_scale,
Distance = dist
)
}
# —— 3. Read and combine all traces ——
all_traces <- optim_params$id %>%
purrr::map_dfr(read_trace)
trace_file
trace_file <- file.path(
results_dir,
stringr::str_c("extended_calibration-calibration-", id, ".trace")
)
results_dir
id=1
trace_file <- file.path(
results_dir,
stringr::str_c("extended_calibration-calibration-", id, ".trace")
)
trace_file
df <- read.table(trace_file)
df
df <- read.table(trace_file, header = F )
df
df <- read.table(trace_file, header = T )
df
dist <- optim_params %>% filter(id == !!id) %>% pull(distance)
dist
df %>% mutate(
Time     = Time / time_scale,
Distance = dist
)
View(df)
df %>% mutate(Distance = dist)
# —— 2. Helper: read a single .trace file and tag by error distance ——
read_trace <- function(id) {
trace_file <- file.path(
results_dir,
stringr::str_c("extended_calibration-calibration-", id, ".trace")
)
df <- read.table(trace_file, header = T )
dist <- optim_params %>% filter(id == !!id) %>% pull(distance)
df %>% mutate(Distance = dist)
}
# —— 3. Read and combine all traces ——
all_traces <- optim_params$id %>%
purrr::map_dfr(read_trace)
View(all_traces)
# —— 4. Build plot ——
p <- ggplot(all_traces, aes(x = Time, y = X1, group = Distance, color = Distance)) +
geom_line(alpha = 0.4) +
geom_line(data = reference_df, aes(x = Time, y = X1),
color = "red", size = 1.1) +
scale_color_gradient(
low      = "red",
mid      = "white",
high     = "blue",
midpoint = median(all_traces$Distance),
name     = "Calibration\nerror"
) +
labs(
title = "Calibration Trajectories vs. Reference",
x     = "Time (normalized)",
y     = "X1 count"
) +
theme_minimal(base_size = base_font_size) +
theme(
plot.title      = element_text(face = "bold", size = base_font_size + 2),
axis.title      = element_text(face = "bold"),
legend.position = "right",
legend.title    = element_text(face = "bold"),
legend.text     = element_text(size = base_font_size - 2),
panel.grid.minor = element_blank()
)
ggplot(all_traces, aes(x = Time, y = X1, group = Distance, color = Distance)) +
geom_line(alpha = 0.4) +
geom_line(data = reference_df, aes(x = Time, y = X1),
color = "red", linewidth = 1.1)
reference_df
ggplot(all_traces, aes(x = Time, y = X1, group = Distance, color = Distance)) +
geom_line(alpha = 0.4)
