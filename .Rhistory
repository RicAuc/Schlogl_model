s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
s$SSA
ana_args
# downloadContainers()
library(parallel)
ana_args$solver_type = "SSA"
ana_args$parallel_processors = detectCores()
ana_args$n_config = ana_args$parallel_processors*2
ana_args
do.call(model.analysis, ana_args)
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = FALSE,
f_time         = 50,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
if(s$SSA){
ana_args$solver_type = "SSA"
ana_args$parallel_processors = detectCores()
ana_args$n_run = ana_args$parallel_processors*2
}
do.call(model.analysis, ana_args)
file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
trace
read.table(trace, header = F)
ssa_profiles = read.table(trace, header = F)
ssa_profiles
f_time = 50
s_time = 1
i_time = 0
plot_stochastics = function(f_time, s_time, i_time) {
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
ssa_profiles = read.table(trace, header = F)
head(ssa_profiles)
}
plot_stochastics(f_time, s_time, i_time)
plot_stochastics = function(f_time, s_time, i_time) {
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
ssa_profiles = read.table(trace, header = T)
head(ssa_profiles)
}
plot_stochastics(f_time, s_time, i_time)
f_time
s_time
i_time
# Read the trace file
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
ssa_profiles <- read.table(trace, header = TRUE)
ssa_profiles
# Extract unique runs
runs <- unique(ssa_profiles$run)
runs
ssa_profiles
plot_stochastics = function(f_time, s_time, i_time) {
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
ssa_profiles = read.table(trace, header = T)
head(ssa_profiles)
}
f_time = 50
s_time = 1
i_time = 0
plot_stochastics = function(f_time, s_time, i_time) {
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
ssa_profiles = read.table(trace, header = T)
head(ssa_profiles)
}
plot_stochastics(f_time, s_time, i_time)
# Read the trace file
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
ssa_profiles = read.table(trace, header = T)
colnames(ssa_profiles)
!"run" %in% colnames(ssa_profiles)
# Get unique time points to identify different runs
time_ranges = rle(diff(ssa_profiles$Time) < 0)
time_ranges
run_ids = cumsum(c(1, time_ranges$lengths))[1:nrow(ssa_profiles)]
run_ids
# Load required libraries
library(ggplot2)
library(reshape2)
# Read trace data
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
trace
ssa_profiles <- read.table(trace, header = TRUE)
ssa_profiles
# Subset data to the specified time window
ssa_subset <- subset(ssa_profiles, Time >= i_time & Time <= f_time)
ssa_subset
View(ssa_subset)
ncol(ssa_subset)
# Subset data to the specified time window
ssa_subset <- subset(ssa_profiles, Time >= i_time & Time <= f_time)
ssa_subset
i_time
# Subset data to the specified time window
ssa_subset <- dplyr::subset(ssa_profiles, Time >= i_time & Time <= f_time)
ssa_profiles %>% filter(between(Time, 0, 50))
View(ssa_profiles %>% filter(between(Time, 0, 50)))
nrow(ssa_profiles)
50*16
split(ssa_profiles, ceiling(seq_len(nrow(ssa_profiles))/f_time))
chunks = split(ssa_profiles, ceiling(seq_len(nrow(ssa_profiles))/f_time))
View(chunks)
chunks = split(ssa_profiles, ceiling(seq_len(nrow(ssa_profiles))/(f_time+1)))
melt(chunks, id.vars = "Time", variable.name = "Trajectory", value.name = "Value")
View(melt(chunks, id.vars = "Time", variable.name = "Trajectory", value.name = "Value"))
# Read trace data
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
trace
ssa_profiles <- read.table(trace, header = TRUE)
head(ssa_profiles)
library(yaml)
library(epimod)
# downloadContainers()
library(parallel)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
# load config
cfg <- yaml::read_yaml("config.yml")
s = cfg$settings[[9]]
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = FALSE,
f_time         = 50,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
if(s$SSA){
ana_args$solver_type = "SSA"
ana_args$parallel_processors = detectCores()
ana_args$n_run = ana_args$parallel_processors*2
}
do.call(model.analysis, ana_args)
# Load required libraries
library(ggplot2)
library(reshape2)
# Read trace data
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
trace
s
s$name = "extended_CPP_Call"
# Read trace data
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
trace
ssa_profiles <- read.table(trace, header = TRUE) %>% select(X1)
# Read trace data
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
read.table(trace, header = TRUE)
library(yaml)
library(epimod)
# downloadContainers()
library(parallel)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
# load config
cfg <- yaml::read_yaml("config.yml")
s = cfg$settings[[9]]
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = FALSE,
f_time         = 50,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
if(s$SSA){
ana_args$solver_type = "SSA"
ana_args$parallel_processors = detectCores()
ana_args$n_run = ana_args$parallel_processors*2
}
do.call(model.analysis, ana_args)
library(yaml)
library(epimod)
# downloadContainers()
library(parallel)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
# load config
cfg <- yaml::read_yaml("config.yml")
cat(">>> Processing:", s$name, "...\n")
s = cfg$settings[[9]]
s
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = FALSE,
f_time         = 50,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
if(s$SSA){
ana_args$solver_type = "SSA"
ana_args$parallel_processors = detectCores()
ana_args$n_run = ana_args$parallel_processors*2
}
do.call(model.analysis, ana_args)
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = FALSE,
f_time         = 50,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
if(s$SSA){
ana_args$solver_type = "SSA"
ana_args$parallel_processors = detectCores()
ana_args$n_run = ana_args$parallel_processors*2
}
do.call(model.analysis, ana_args)
# Load required libraries
library(ggplot2)
library(reshape2)
# Read trace data
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
ssa_profiles <- read.table(trace, header = TRUE) %>% select(X1)
ssa_profiles
read.table(trace, header = TRUE)
head(read.table(trace, header = TRUE) )
ssa_profiles <- read.table(trace, header = TRUE) %>% select(X1)
# Read trace data
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
ssa_profiles <- read.table(trace, header = TRUE) %>% select(X1)
chunks = split(ssa_profiles, ceiling(seq_len(nrow(ssa_profiles))/(f_time+1)))
f_time = 50
chunks = split(ssa_profiles, ceiling(seq_len(nrow(ssa_profiles))/(f_time+1)))
View(chunks)
# Read trace data
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
ssa_profiles <- read.table(trace, header = TRUE) %>% select(c(Time, X1))
chunks = split(ssa_profiles, ceiling(seq_len(nrow(ssa_profiles))/(f_time+1)))
# Reshape data to long format for plotting
ssa_long <- melt(chunks, id.vars = "Time", variable.name = "Trajectory", value.name = "Value")
head(ssa_long)
# Calculate mean across trajectories at each time point
mean_data <- data.frame(
Time = ssa_subset$Time,
Mean = rowMeans(ssa_subset[, -1], na.rm = TRUE)  # Exclude 'Time' column
)
ssa_long[, -1]
view(ssa_long)
View(ssa_long)
# Reshape data to long format for plotting
ssa_long <- melt(chunks, id.vars = "Time", variable.name = "Trajectory", value.name = "Value")  %>%
group_by(L1) %>%
dplyr::summarize(Mean = mean(Value, na.rm=TRUE))
ssa_long
View(ssa_long)
View(melt(chunks, id.vars = "Time", variable.name = "Trajectory", value.name = "Value"))
ssa_profiles
# Reshape data to long format for plotting
ssa_long <- melt(chunks, id.vars = "Time", variable.name = "Trajectory", value.name = "Value")  %>%
group_by(Time) %>%
dplyr::summarize(Mean = mean(Value, na.rm=TRUE))
# Load required libraries
library(ggplot2)
library(reshape2)
# Read trace data
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
ssa_profiles <- read.table(trace, header = TRUE) %>% select(c(Time, X1))
chunks = split(ssa_profiles, ceiling(seq_len(nrow(ssa_profiles))/(f_time+1)))
# Reshape data to long format for plotting
ssa_long <- melt(chunks, id.vars = "Time", variable.name = "Trajectory", value.name = "Value")
mean_data = ssa_long %>%
group_by(Time) %>%
dplyr::summarize(Mean = mean(Value, na.rm=TRUE))
mean_data
ggplot() +
geom_line(data = ssa_long, aes(x = Time, y = Value, group = Trajectory), alpha = 0.3) +
geom_line(data = mean_data, aes(x = Time, y = Mean), color = "red", linewidth = 1) +
labs(title = "Stochastic Trajectories", x = "Time", y = "Value") +
theme_minimal()
# Create the plot
ggplot() +
geom_line(data = ssa_long, aes(x = Time, y = Value, group = L1), alpha = 0.3) +
geom_line(data = mean_data, aes(x = Time, y = Mean), color = "red", linewidth = 1) +
labs(title = "Stochastic Trajectories", x = "Time", y = "Value") +
theme_minimal()
plot_stochastics = function(f_time, s_time, i_time) {
# Load required libraries
library(ggplot2)
library(reshape2)
# Read trace data
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
ssa_profiles <- read.table(trace, header = TRUE) %>% select(c(Time, X1))
chunks = split(ssa_profiles, ceiling(seq_len(nrow(ssa_profiles))/(f_time+1)))
# Reshape data to long format for plotting
ssa_long <- melt(chunks, id.vars = "Time", variable.name = "Trajectory", value.name = "Value")
mean_data = ssa_long %>%
group_by(Time) %>%
dplyr::summarize(Mean = mean(Value, na.rm=TRUE))
# Create the plot
p = ggplot() +
geom_line(data = ssa_long, aes(x = Time, y = Value, group = L1), alpha = 0.3) +
geom_line(data = mean_data, aes(x = Time, y = Mean), color = "red", linewidth = 1) +
labs(title = "Stochastic Trajectories", x = "Time", y = "Value") +
theme_minimal()
return(p)
}
s$SSA
p = plot_stochastics(f_time = 50, s_time = 1, i_time = 0)
p
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics", "_SSA_",".pdf")), p,
height = 2.5, width = 2.5)
plot_stochastics = function(f_time, s_time, i_time) {
# Load required libraries
library(ggplot2)
library(reshape2)
# Read trace data
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
ssa_profiles <- read.table(trace, header = TRUE) %>% select(c(Time, X1))
chunks = split(ssa_profiles, ceiling(seq_len(nrow(ssa_profiles))/(f_time+1)))
# Reshape data to long format for plotting
ssa_long <- melt(chunks, id.vars = "Time", variable.name = "Trajectory", value.name = "Value")
mean_data = ssa_long %>%
group_by(Time) %>%
dplyr::summarize(Mean = mean(Value, na.rm=TRUE))
# Create the plot
p = ggplot() +
geom_line(data = ssa_long, aes(x = Time, y = Value, group = L1), alpha = 0.3) +
geom_line(data = mean_data, aes(x = Time, y = Mean), color = "red", linewidth = 0.75) +
labs(title = "Stochastic Trajectories", x = "Time", y = "Value") +
theme_minimal()
return(p)
}
p = plot_stochastics(f_time = 50, s_time = 1, i_time = 0)
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics", "_SSA_",".pdf")), p,
height = 2.5, width = 3)
s
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = FALSE,
f_time         = 50,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
if(s$SSA){
ana_args$solver_type = "SSA"
ana_args$parallel_processors = detectCores()
ana_args$n_run = ana_args$parallel_processors*10
}
do.call(model.analysis, ana_args)
p = plot_stochastics(f_time = 50, s_time = 1, i_time = 0)
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics", "_SSA_",".pdf")), p,
height = 2.5, width = 3)
library(yaml)
library(epimod)
# downloadContainers()
library(parallel)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
# load config
cfg <- yaml::read_yaml("config.yml")
s = cfg$settings[[10]]
s
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = FALSE,
f_time         = 50,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
if(s$SSA){
ana_args$solver_type = "SSA"
ana_args$parallel_processors = detectCores()
ana_args$n_run = ana_args$parallel_processors*10
}
do.call(model.analysis, ana_args)
p = plot_stochastics(f_time = 50, s_time = 1, i_time = 0)
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics", "_SSA_",".pdf")), p,
height = 2.5, width = 3)
