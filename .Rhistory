name = "Rel. dist") +
labs(x = expression(k[1]),
y = expression(k[2]),
color = "Relative\nerror") +
theme_minimal() +
theme(
axis.title       = element_text(size = axis_title_size),
axis.text        = element_text(size = axis_text_size),
legend.title     = element_text(size = legend_title_size, face = "bold"),
legend.text      = element_text(size = legend_text_size),
panel.grid.minor = element_blank()
)
# return a list of plots
list(trajectories = plX1, parameter_space = plParams)
}
plot_stochastics <- function(f_time, s_time, i_time,
title, subtitle,
axis_title_size, axis_text_size,
title_size, subtitle_size) {
# Read trace data
trace_file <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
ssa_profiles <- read.table(trace_file, header = TRUE) %>%
select(Time, X1 = X1)
# Split into runs and re-bind with a Trajectory ID
runs <- split(ssa_profiles, ceiling(seq_len(nrow(ssa_profiles)) / (f_time + 1)))
ssa_long <- bind_rows(runs, .id = "Trajectory") %>%
mutate(Trajectory = factor(Trajectory),
Value      = X1) %>%
select(Time, Trajectory, Value)
# Compute mean trajectory
mean_data <- ssa_long %>%
group_by(Time) %>%
summarize(Mean = mean(Value, na.rm = TRUE), .groups = "drop")
# Build the plot
p <- ggplot() +
# plot all individual runs, grouping by Trajectory
geom_line(
data = ssa_long,
aes(x = Time, y = Value, group = Trajectory),
alpha = 0.25,
color = "black"
) +
geom_line(
data = mean_data,
aes(x = Time, y = Mean),
inherit.aes = FALSE,
color = "firebrick",
linewidth  = 0.9
)+
labs(title    = title,
subtitle = subtitle,
x        = "Time",
y        = "X1 count") +
theme_minimal() +
theme(
plot.title       = element_text(size = title_size, face = "bold"),
plot.subtitle    = element_text(size = subtitle_size, margin = margin(b = 8)),
axis.title       = element_text(size = axis_title_size),
axis.text        = element_text(size = axis_text_size),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank()
)
return(p)
}
calibration_plotting <- function(results_dir,
model_name,
reference_file,
optim_trace,
output_plot,
ref_col_names,
width,
height,
variable_ref,
base_font_size) {
reference_df = read.table(reference_trace, header = FALSE, sep = " ")
colnames(reference_df) = ref_col_names
optim_params <- read.table(optim_trace, header = T)
read_trace <- function(id) {
trace_file <- file.path(
results_dir,
stringr::str_c(paste0(model_name, "-calibration-"), id, ".trace")
)
df <- read.table(trace_file, header = T )
dist <- optim_params %>% filter(id == !!id) %>% pull(distance)
df %>% mutate(Distance = dist)
}
all_traces <- optim_params$id %>% purrr::map_dfr(read_trace)
p <- ggplot() +
geom_line(data = all_traces,
aes(x = Time,
y = .data[[variable_ref]],
group = Distance,
color = Distance), alpha = 0.4) +
geom_line(data = reference_df,
aes(x = Time,
y = .data[[variable_ref]]),
color = "red",
linewidth = 0.75) +
scale_color_gradient2(low = "red",
mid = "white",
high = "blue",
midpoint = median(all_traces$Distance),
name = "Calibration\nerror") +
theme_minimal(base_size = base_font_size) +
labs(title = "Calibration Fit vs. Reference",
x = "Time",
y = variable_ref) +
theme(plot.title = element_text(face = "bold", size = base_font_size + 2),
axis.title = element_text(face = "bold"),
legend.position = "right",
legend.title = element_text(face = "bold"),
legend.text = element_text(size = base_font_size - 2),
panel.grid.minor = element_blank())
ggsave(filename = output_plot, plot = p, width = width, height = height)
invisible(p)
}
calibration_plotting(results_dir    = file.path(wd, paste0(s$name, "_calibration")),
reference_file = reference_trace,
model_name = s$name,
variable_ref = "X1",
ref_col_names = c("Time", "X1"),
optim_trace    = file.path(wd, paste0(s$name, "_calibration"), paste0(s$name, "-calibration_optim-config.csv")),
output_plot    = file.path(wd, "plots", paste0(s$name, "-calibration_plot.pdf")),
width          = 5,
height         = 3,
base_font_size = 12)
calibration_plotting(results_dir    = file.path(wd, paste0(s$name, "_calibration")),
reference_file = reference_trace,
model_name = s$name,
variable_ref = "X1",
ref_col_names = c("Time", "X1"),
optim_trace    = file.path(wd, paste0(s$name, "_calibration"), paste0(s$name, "-calibration_optim-config.csv")),
output_plot    = file.path(wd, "plots", paste0(s$name, "-calibration_plot.pdf")),
width          = 4,
height         = 2,
base_font_size = 12)
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"dockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
calibration_plotting <- function(results_dir,
model_name,
reference_file,
optim_trace,
output_plot,
ref_col_names,
width,
height,
variable_ref,
title_text = "Calibration Fit vs. Reference",
subtitle_text = NULL,
title_size = 14,
subtitle_size = 12,
axis_title_size = 12,
axis_text_size = 10,
legend_title_size = 12,
legend_text_size = 10) {
reference_df <- read.table(reference_file, header = FALSE, sep = " ")
colnames(reference_df) <- ref_col_names
optim_params <- read.table(optim_trace, header = TRUE)
read_trace <- function(id) {
trace_file <- file.path(
results_dir,
stringr::str_c(paste0(model_name, "-calibration-"), id, ".trace")
)
df <- read.table(trace_file, header = TRUE)
dist <- optim_params %>% dplyr::filter(id == !!id) %>% dplyr::pull(distance)
df %>% dplyr::mutate(Distance = dist)
}
all_traces <- optim_params$id %>% purrr::map_dfr(read_trace)
p <- ggplot() +
geom_line(data = all_traces,
aes(x = Time,
y = .data[[variable_ref]],
group = Distance,
color = Distance), alpha = 0.4) +
geom_line(data = reference_df,
aes(x = Time,
y = .data[[variable_ref]]),
color = "red",
linewidth = 0.75) +
scale_color_gradient2(
low = "red",
mid = "white",
high = "blue",
midpoint = median(all_traces$Distance),
name = "Calibration\nerror"
) +
theme_minimal() +
labs(title = title_text,
subtitle = subtitle_text,
x = "Time",
y = variable_ref) +
theme(
plot.title       = element_text(face = "bold", size = title_size),
plot.subtitle    = element_text(size = subtitle_size),
axis.title       = element_text(face = "bold", size = axis_title_size),
axis.text        = element_text(size = axis_text_size),
legend.title     = element_text(face = "bold", size = legend_title_size),
legend.text      = element_text(size = legend_text_size),
legend.position  = "right",
panel.grid.minor = element_blank()
)
ggsave(filename = output_plot, plot = p, width = width, height = height)
invisible(p)
}
calibration_plotting(
results_dir       = file.path(wd, paste0(s$name, "_calibration")),
reference_file    = reference_trace,
model_name        = s$name,
variable_ref      = "X1",
ref_col_names     = c("Time", "X1"),
optim_trace       = file.path(wd, paste0(s$name, "_calibration"), paste0(s$name, "-calibration_optim-config.csv")),
output_plot       = file.path(wd, "plots", paste0(s$name, "-calibration_plot.pdf")),
width             = 4,
height            = 2,
title_text        = "Calibration Output vs Reference",
subtitle_text     = "Top traces are best fits",
title_size        = 16,
subtitle_size     = 12,
axis_title_size   = 12,
axis_text_size    = 10,
legend_title_size = 11,
legend_text_size  = 9
)
calibration_plotting(
results_dir       = file.path(wd, paste0(s$name, "_calibration")),
reference_file    = reference_trace,
model_name        = s$name,
variable_ref      = "X1",
ref_col_names     = c("Time", "X1"),
optim_trace       = file.path(wd, paste0(s$name, "_calibration"), paste0(s$name, "-calibration_optim-config.csv")),
output_plot       = file.path(wd, "plots", paste0(s$name, "-calibration_plot.pdf")),
width             = 4,
height            = 2,
title_text        = "Calibration Output vs Reference",
subtitle_text     = "Top traces are best fits",
title_size        = 12,
subtitle_size     = 10,
axis_title_size   = 10,
axis_text_size    = 10,
legend_title_size = 7,
legend_text_size  = 9
)
calibration_plotting(
results_dir       = file.path(wd, paste0(s$name, "_calibration")),
reference_file    = reference_trace,
model_name        = s$name,
variable_ref      = "X1",
ref_col_names     = c("Time", "X1"),
optim_trace       = file.path(wd, paste0(s$name, "_calibration"), paste0(s$name, "-calibration_optim-config.csv")),
output_plot       = file.path(wd, "plots", paste0(s$name, "-calibration_plot.pdf")),
width             = 4,
height            = 2,
title_text        = "Calibration Output vs Reference",
subtitle_text     = "Top traces are best fits",
title_size        = 12,
subtitle_size     = 10,
axis_title_size   = 10,
axis_text_size    = 10,
legend_title_size = 9,
legend_text_size  = 9
)
calibration_plotting(
results_dir       = file.path(wd, paste0(s$name, "_calibration")),
reference_file    = reference_trace,
model_name        = s$name,
variable_ref      = "X1",
ref_col_names     = c("Time", "X1"),
optim_trace       = file.path(wd, paste0(s$name, "_calibration"), paste0(s$name, "-calibration_optim-config.csv")),
output_plot       = file.path(wd, "plots", paste0(s$name, "-calibration_plot.pdf")),
width             = 4,
height            = 3,
title_text        = "Calibration Output vs Reference",
subtitle_text     = "Top traces are best fits",
title_size        = 12,
subtitle_size     = 10,
axis_title_size   = 10,
axis_text_size    = 10,
legend_title_size = 9,
legend_text_size  = 9
)
calibration_plotting(
results_dir       = file.path(wd, paste0(s$name, "_calibration")),
reference_file    = reference_trace,
model_name        = s$name,
variable_ref      = "X1",
ref_col_names     = c("Time", "X1"),
optim_trace       = file.path(wd, paste0(s$name, "_calibration"), paste0(s$name, "-calibration_optim-config.csv")),
output_plot       = file.path(wd, "plots", paste0(s$name, "-calibration_plot.pdf")),
width             = 4,
height            = 2.5,
title_text        = "Calibration Output vs Reference",
subtitle_text     = "Top traces are best fits",
title_size        = 12,
subtitle_size     = 10,
axis_title_size   = 10,
axis_text_size    = 10,
legend_title_size = 9,
legend_text_size  = 9
)
calibration_plotting(
results_dir       = file.path(wd, paste0(s$name, "_calibration")),
reference_file    = reference_trace,
model_name        = s$name,
variable_ref      = "X1",
ref_col_names     = c("Time", "X1"),
optim_trace       = file.path(wd, paste0(s$name, "_calibration"), paste0(s$name, "-calibration_optim-config.csv")),
output_plot       = file.path(wd, "plots", paste0(s$name, "-calibration_plot.pdf")),
width             = 4,
height            = 2.5,
title_text        = "Calibration Output vs Reference",
subtitle_text     = NULL,
title_size        = 12,
subtitle_size     = 10,
axis_title_size   = 10,
axis_text_size    = 10,
legend_title_size = 9,
legend_text_size  = 9
)
library(yaml)
library(epimod)
library(devtools)
# install_github("https://github.com/qBioTurin/epimod", ref="epimod_pFBA")
# install_github("https://github.com/qBioTurin/epimod", ref="master")
# downloadContainers()
library(parallel)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
f_time = 50
s_time = 0.1
i_time = 0
nodes = 2
debug = TRUE
cfg <- yaml::read_yaml("config.yml")
reference_trace = file.path(input_dir, "upper_stable_state.csv")
save_ref = 1
if (file.exists(reference_trace)) {
ref_trace = read.table(reference_trace, header = FALSE, sep = " ")
colnames(ref_trace) = c("Time", "X1")
plot_ref()
save_ref = FALSE
} else {
cat("Reference trace file not found.", "\n")
cat("generate reference data ... ", "\n")
save_ref = TRUE
}
library(yaml)
library(epimod)
library(devtools)
# install_github("https://github.com/qBioTurin/epimod", ref="epimod_pFBA")
# install_github("https://github.com/qBioTurin/epimod", ref="master")
# downloadContainers()
library(parallel)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
f_time = 50
s_time = 0.1
i_time = 0
nodes = 2
cfg <- yaml::read_yaml("config.yml")
reference_trace = file.path(input_dir, "upper_stable_state.csv")
save_ref = 1
file.exists(reference_trace)
ref_trace = read.table(reference_trace, header = FALSE, sep = " ")
ref_trace
head(ref_trace)
ref_col_names = c("Time", "X1")
s = cfg$settings[[save_ref]]
s
library(yaml)
library(epimod)
library(devtools)
# install_github("https://github.com/qBioTurin/epimod", ref="epimod_pFBA")
# install_github("https://github.com/qBioTurin/epimod", ref="master")
# downloadContainers()
library(parallel)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
f_time = 50
s_time = 0.1
i_time = 0
nodes = 2
cfg <- yaml::read_yaml("config.yml")
reference_trace = file.path(input_dir, "upper_stable_state.csv")
save_ref = 1
ref_col_names = c("Time", "X1")
s = cfg$settings[[save_ref]]
s
library(yaml)
library(epimod)
library(devtools)
# install_github("https://github.com/qBioTurin/epimod", ref="epimod_pFBA")
# install_github("https://github.com/qBioTurin/epimod", ref="master")
# downloadContainers()
library(parallel)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
f_time = 50
s_time = 0.1
i_time = 0
nodes = 2
cfg <- yaml::read_yaml("config.yml")
reference_trace = file.path(input_dir, "upper_stable_state.csv")
save_ref = 1
ref_col_names = c("Time", "X1")
if ( file.exists(reference_trace) ) {
ref_trace = read.table(reference_trace, header = FALSE, sep = " ")
colnames(ref_trace) = ref_col_names
plot_ref()
save_ref = FALSE
} else {
cat("Reference trace file not found.", "\n")
cat("generate reference data ... ", "\n")
s = cfg$settings[[save_ref]]
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
f_time         = f_time,
s_time         = s_time,
i_time         = i_time
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
do.call(model.analysis, ana_args)
trace <- read.table(
file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace")),
header = TRUE, sep = "", dec = ".")
write.table(trace, file = reference_trace,
sep = " ", col.names=FALSE, row.names = FALSE)
save_ref = TRUE
}
library(yaml)
library(epimod)
library(devtools)
# install_github("https://github.com/qBioTurin/epimod", ref="epimod_pFBA")
# install_github("https://github.com/qBioTurin/epimod", ref="master")
# downloadContainers()
library(parallel)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
f_time = 50
s_time = 0.1
i_time = 0
nodes = 2
cfg <- yaml::read_yaml("config.yml")
reference_trace = file.path(input_dir, "upper_stable_state.csv")
save_ref = 1
ref_col_names = c("Time", "X1")
if ( file.exists(reference_trace) ) {
ref_trace = read.table(reference_trace, header = FALSE, sep = " ")
colnames(ref_trace) = ref_col_names
plot_ref()
save_ref = FALSE
} else {
cat("Reference trace file not found.", "\n")
cat("generate reference data ... ", "\n")
s = cfg$settings[[save_ref]]
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
f_time         = f_time,
s_time         = s_time,
i_time         = i_time
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
do.call(model.analysis, ana_args)
trace <- read.table(
file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace")),
header = TRUE, sep = "", dec = ".")
write.table(trace, file = reference_trace,
sep = " ", col.names=FALSE, row.names = FALSE)
save_ref = TRUE
}
install_github("https://github.com/qBioTurin/epimod", ref="epimod_pFBA")
