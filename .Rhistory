to   = file.path(gen_dir, paste0("iniData_reduced.csv")),
overwrite = TRUE
)
gen_args <- list(net_fname  = file.path(wd, s$pnpro))
if (!is.null(s$customCPP))  gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
# move generated artifacts
files <- setdiff(list.files(pattern=paste0(s$name, ".")), grep("main", list.files(), value=TRUE))
file.rename(files, file.path(solver_dir, files))
# move generated artifacts
files <- setdiff(list.files(pattern=paste0(s$name, ".")), grep("main", list.files(), value=TRUE))
file.rename(files, file.path(solver_dir, files))
do.call(model.generation, gen_args)
# move generated artifacts
files <- setdiff(list.files(pattern=paste0(s$name, ".")), grep("main", list.files(), value=TRUE))
files
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
do.call(model.analysis, ana_args)
cat(">>> Processing:", s$name, "...\n")
solver_dir <- file.path(input_dir, s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
## 1) ensure generation context has all needed files
gen_dir <- file.path(wd, "generation")
gen_args <- list(net_fname  = file.path(wd, s$pnpro))
if (!is.null(s$customCPP))  gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
# copy the kinetics table into generation/
file.copy(
from = file.path(wd, "input", "KineticsParameters.csv"),
to   = file.path(gen_dir, "KineticsParameters.csv"),
overwrite = TRUE
)
file.copy(
from = file.path(wd, "input", paste0("iniData_reduced.csv")),
to   = file.path(gen_dir, paste0("iniData_reduced.csv")),
overwrite = TRUE
)
# move generated artifacts
files <- setdiff(list.files(pattern=paste0(s$name, ".")), grep("main", list.files(), value=TRUE))
file.rename(files, file.path(solver_dir, files))
list.files(pattern="\\.log$")
list.files(pattern="\\.log$", "_analysis")
c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"DockerID", ".Rhistory", "generation")
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"DockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
# move generated artifacts
files <- setdiff(list.files(pattern=paste0(s$name, ".")), grep("main", list.files(), value=TRUE))
file.rename(files, file.path(solver_dir, files))
gen_dir
file.copy(
from = file.path(wd, "input", "KineticsParameters.csv"),
to   = file.path(gen_dir, "KineticsParameters.csv"),
overwrite = TRUE
)
file.copy(
from = file.path(wd, "input", paste0("iniData_reduced.csv")),
to   = file.path(gen_dir, paste0("iniData_reduced.csv")),
overwrite = TRUE
)
# move generated artifacts
files <- setdiff(list.files(pattern=paste0(s$name, ".")), grep("main", list.files(), value=TRUE))
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
do.call(model.analysis, ana_args)
s$name
cat(">>> Processing:", s$name, "...\n")
solver_dir <- file.path(input_dir, s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
## 1) ensure generation context has all needed files
gen_dir <- file.path(wd, "generation")
gen_args <- list(net_fname  = file.path(wd, s$pnpro))
if (!is.null(s$customCPP))  gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
# copy the kinetics table into generation/
file.copy(
from = file.path(wd, "input", "KineticsParameters.csv"),
to   = file.path(gen_dir, "KineticsParameters.csv"),
overwrite = TRUE
)
file.copy(
from = file.path(wd, "input", paste0("iniData_reduced.csv")),
to   = file.path(gen_dir, paste0("iniData_reduced.csv")),
overwrite = TRUE
)
# move generated artifacts
files <- setdiff(list.files(pattern=paste0(s$name, ".")), grep("main", list.files(), value=TRUE))
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
do.call(model.analysis, ana_args)
# 1) Prep generation context
gen_dir <- file.path(wd, "generation")
# copy *this* variant's KineticsParameters.csv into generation/
kin_src <- file.path(wd, "input", s$name, "KineticsParameters.csv")
kin_src
if (file.exists(kin_src)) {
file.copy(from = kin_src,
to   = file.path(gen_dir, "KineticsParameters.csv"),
overwrite = TRUE)
} else {
stop("Cannot find kinetics file: ", kin_src)
}
!is.null(s$user_files)
s$user_files
kin_src <- file.path(wd, s$user_files)
file.exists(kin_src)
if ( !is.null(s$user_files) ) {
kin_src <- file.path(wd, s$user_files)
if ( !file.exists(kin_src) ) stop("Cannot find kinetics file: ", kin_src)
file.copy(from = kin_src,
to = file.path(gen_dir, basename(s$user_files)), overwrite = TRUE)}
kin_src
file.path(gen_dir, basename(s$user_files))
cat(">>> Processing:", s$name, "...\n")
# 1) Prep generation context
gen_dir <- file.path(wd, "generation")
# copy *this* variant's KineticsParameters.csv into generation/
kin_src <- file.path(wd, "input", s$name, "KineticsParameters.csv")
if (file.exists(kin_src)) {
file.copy(from = kin_src,
to   = file.path(gen_dir, "KineticsParameters.csv"),
overwrite = TRUE)
} else {
if ( !is.null(s$user_files) ) {
kin_src <- file.path(wd, s$user_files)
if ( !file.exists(kin_src) ) stop("Cannot find kinetics file: ", kin_src)
file.copy(from = kin_src,
to = file.path(gen_dir, basename(s$user_files)), overwrite = TRUE)}
}
# 2) Now run model.generation() (PN2ODE will see KineticsParameters.csv in /home)
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
# move generated artifacts
files <- setdiff(list.files(pattern=paste0(s$name, ".")), grep("main", list.files(), value=TRUE))
file.rename(files, file.path(solver_dir, files))
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"DockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
do.call(model.analysis, ana_args)
s$user_files
cat(">>> Processing:", s$name, "...\n")
## 0) paths
wd      <- getwd()
gen_dir <- file.path(wd, "generation")
## 1) copy your kinetics table into generation/ **before** generating
if (!is.null(s$user_files)) {
kin_src <- file.path(wd, s$user_files)
if (!file.exists(kin_src)) stop("Cannot find kinetics file: ", kin_src)
file.copy(
from      = kin_src,
to        = file.path(gen_dir, basename(s$user_files)),
overwrite = TRUE
)
}
## 1) copy your kinetics table into generation/ **before** generating
if (!is.null(s$user_files)) {
kin_src <- file.path(wd, s$user_files)
if (!file.exists(kin_src)) stop("Cannot find kinetics file: ", kin_src)
file.copy(
from      = kin_src,
to        = file.path(gen_dir, basename(s$user_files)),
overwrite = TRUE
)
}
## (optionally) copy any iniData_*.csv here if your PNPRO reads FromTable on those
if (!is.null(s$parameters)) {
ini_src <- file.path(wd, s$parameters)
if (!file.exists(ini_src)) stop("Cannot find iniData file: ", ini_src)
file.copy(
from      = ini_src,
to        = file.path(gen_dir, basename(s$parameters)),
overwrite = TRUE
)
}
s$parameters
## 2) model generation (PN2ODE will now see your CSVs in /home)
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 1) copy your kinetics table into generation/ **before** generating
if (!is.null(s$user_files)) {
kin_src <- file.path(wd, s$user_files)
if (!file.exists(kin_src)) stop("Cannot find kinetics file: ", kin_src)
file.copy(
from      = kin_src,
to        = file.path(gen_dir, basename(s$user_files)),
overwrite = TRUE
)
}
## (optionally) copy any iniData_*.csv here if your PNPRO reads FromTable on those
if (!is.null(s$parameters)) {
ini_src <- file.path(wd, s$parameters)
if (!file.exists(ini_src)) stop("Cannot find iniData file: ", ini_src)
file.copy(
from      = ini_src,
to        = file.path(gen_dir, basename(s$parameters)),
overwrite = TRUE
)
}
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
do.call(model.analysis, ana_args)
do.call(model.analysis, ana_args)
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"DockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
s = cfg$settings[[6]]
#!/usr/bin/env Rscript
library(yaml)
library(epimod)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
#!/usr/bin/env Rscript
library(yaml)
library(epimod)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source("functions/visualize_dynamics.R")
cfg     <- yaml::read_yaml("config.yml")
wd      <- getwd()
gen_dir <- file.path(wd, "generation")
library(yaml)
library(epimod)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source("functions/visualize_dynamics.R")
cfg     <- yaml::read_yaml("config.yml")
wd      <- getwd()
gen_dir <- file.path(wd, "generation")
s = cfg$settings[[6]]
cat(">>> Processing:", s$name, "\n")
# ensure solver output directory exists
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
# 1) model.generation: pass your kinetics CSV right in
gen_args <- list(
net_fname         = file.path(wd, s$pnpro),
user_files_fname  = s$user_files         # <— here!
)
if (!is.null(s$customCPP))  gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
# 1) model.generation: pass your kinetics CSV right in
gen_args <- list(
net_fname         = file.path(wd, s$pnpro),
user_files  = s$user_files         # <— here!
)
if (!is.null(s$customCPP))  gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
if (!is.null(s$customCPP))  gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
# 1) model.generation: pass your kinetics CSV right in
gen_args <- list(
net_fname         = file.path(wd, s$pnpro),
)
if (!is.null(s$customCPP))  gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
library(yaml)
library(epimod)
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
# load config
cfg <- yaml::read_yaml("config.yml")
s = cfg$settings[[6]]
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"DockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
## 1) copy your kinetics table into generation/ **before** generating
if (!is.null(s$user_files)) {
kin_src <- file.path(wd, s$user_files)
if (!file.exists(kin_src)) stop("Cannot find kinetics file: ", kin_src)
file.copy(
from      = kin_src,
to        = file.path(gen_dir, basename(s$user_files)),
overwrite = TRUE
)
}
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
gen_args
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
ana_args
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"DockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
do.call(model.analysis, ana_args)
do.call(model.analysis, ana_args)
s$user_files
input_dir
basename(s$user_files)
s$name
file.path(input_dir, s$name, basename(s$user_files))
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
do.call(model.analysis, ana_args)
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"DockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
s = cfg$settings[[6]]
library(yaml)
library(epimod)
# downloadContainers()
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
# load config
cfg <- yaml::read_yaml("config.yml")
s = cfg$settings[[6]]
s$user_files
library(yaml)
library(epimod)
# downloadContainers()
wd  <- getwd()
input_dir <- file.path(wd, "input")
plot_dir  <- file.path(wd, "plots")
source(file.path(wd, "functions/visualize_dynamics.R"))
# load config
cfg <- yaml::read_yaml("config.yml")
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
do.call(model.analysis, ana_args)
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
p <- plot_trace_dashboard_facet(
trace_file = trace,
title      = paste("Dynamics of", s$name),
subtitle   = paste0("From '", s$name, "'"),
ylab       = "Marking",
xlab       = "Time",
palette    = "Dark2",
max_cols   = 3
)
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics.pdf")), p,
height = 2.5, width = 2.5*3)
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"DockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
# s = cfg$settings[[6]]
cat(">>> Processing:", s$name, "...\n")
gen_args <- list(net_fname = file.path(wd, s$pnpro))
if (!is.null(s$customCPP)) gen_args$transitions_fname <- s$customCPP
do.call(model.generation, gen_args)
## 3) move generated artifacts
solver_dir <- file.path(wd, "input", s$name)
if (!dir.exists(solver_dir)) dir.create(solver_dir, recursive=TRUE)
files <- setdiff(
list.files(pattern=paste0(s$name, "\\.")),
grep("main", list.files(), value=TRUE)
)
file.rename(files, file.path(solver_dir, files))
ana_args <- list(
solver_fname   = file.path(solver_dir, paste0(s$name, ".solver")),
debug          = TRUE,
f_time         = 15,
s_time         = 1,
i_time         = 0
)
if (!is.null(s$parameters)) ana_args$parameters_fname <- s$parameters
if (!is.null(s$functions))  ana_args$functions_fname  <- s$functions
if (!is.null(s$user_files)) ana_args$user_files       <- s$user_files
file.copy(from = s$user_files,
to = file.path(input_dir, s$name, basename(s$user_files)),
overwrite = TRUE)
do.call(model.analysis, ana_args)
trace <- file.path(wd, paste0(s$name, "_analysis/", s$name, "-analysis-1.trace"))
p <- plot_trace_dashboard_facet(
trace_file = trace,
title      = paste("Dynamics of", s$name),
subtitle   = paste0("From '", s$name, "'"),
ylab       = "Marking",
xlab       = "Time",
palette    = "Dark2",
max_cols   = 3
)
ggsave(file.path(plot_dir, paste0(s$name, "_dynamics.pdf")), p,
height = 2.5, width = 2.5*3)
additional_files <- c("ExitStatusFile", list.files(pattern="\\.log$"),
list.files(pattern="_analysis"),
"DockerID", ".Rhistory", "generation")
unlink(additional_files[file.exists(additional_files)], recursive=TRUE, force=TRUE)
s$name
