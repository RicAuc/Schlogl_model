# Dashboard-style time series plot
plot_trace_dashboard <- function(trace_file,
title = NULL,
ylab = NULL,
line_color = "darkred",   # dark green
fill_color = "red",   # light green
line_size = 1.2,
text_size = 14) {
# Load and reshape data
trace <- read.table(trace_file, header = TRUE, sep = "", dec = ".")
if (!"Time" %in% colnames(trace)) stop("First column must be 'Time'")
trace_long <- trace %>%
pivot_longer(cols = -Time, names_to = "Variable", values_to = "Value")
# Ensure only one variable to match reference style
if (length(unique(trace_long$Variable)) > 1) {
warning("Multiple variables detected. Only the first one will be plotted.")
trace_long <- trace_long %>% filter(Variable == unique(Variable)[1])
}
ggplot(trace_long, aes(x = Time, y = Value)) +
geom_area(fill = fill_color, alpha = 0.15) +
geom_line(color = line_color, size = line_size) +
labs(title = title, x = NULL, y = ylab) +
theme_minimal(base_size = text_size) +
theme(
plot.title = element_text(face = "bold", size = text_size + 2, hjust = 0),
axis.title.y = element_text(face = "bold", color = "#444444"),
axis.text = element_text(color = "#444444"),
panel.grid.major = element_line(color = "gray85", size = 0.3),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "#f8f9fa", color = NA),
legend.position = "none"
)
}
# Basic visualization - automatically detects all variables
plot_trace_dashboard(file.path(wd, paste0(net_name, "_analysis", "/", net_name, "-analysis-1.trace")),
title = "Schlögl Model Dynamics")
library(ggplot2)
library(dplyr)
library(tidyr)
# Dashboard-style time series plot
plot_trace_dashboard <- function(trace_file,
title = NULL,
ylab = NULL,
line_color = "darkred",   # dark green
fill_color = "red",   # light green
line_size = 1.2,
text_size = 14) {
# Load and reshape data
trace <- read.table(trace_file, header = TRUE, sep = "", dec = ".")
if (!"Time" %in% colnames(trace)) stop("First column must be 'Time'")
trace_long <- trace %>%
pivot_longer(cols = -Time, names_to = "Variable", values_to = "Value")
# Ensure only one variable to match reference style
if (length(unique(trace_long$Variable)) > 1) {
warning("Multiple variables detected. Only the first one will be plotted.")
trace_long <- trace_long %>% filter(Variable == unique(Variable)[1])
}
ggplot(trace_long, aes(x = Time, y = Value)) +
geom_area(fill = fill_color, alpha = 0.05) +
geom_line(color = line_color, size = line_size) +
labs(title = title, x = NULL, y = ylab) +
theme_minimal(base_size = text_size) +
theme(
plot.title = element_text(face = "bold", size = text_size + 2, hjust = 0),
axis.title.y = element_text(face = "bold", color = "#444444"),
axis.text = element_text(color = "#444444"),
panel.grid.major = element_line(color = "gray85", size = 0.3),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "#f8f9fa", color = NA),
legend.position = "none"
)
}
# Basic visualization - automatically detects all variables
plot_trace_dashboard(file.path(wd, paste0(net_name, "_analysis", "/", net_name, "-analysis-1.trace")),
title = "Schlögl Model Dynamics")
library(ggplot2)
library(dplyr)
library(tidyr)
# Dashboard-style time series plot
plot_trace_dashboard <- function(trace_file,
title = NULL,
ylab = NULL,
line_color = "darkred",   # dark green
fill_color = "red",   # light green
line_size = 1.2,
text_size = 14) {
# Load and reshape data
trace <- read.table(trace_file, header = TRUE, sep = "", dec = ".")
if (!"Time" %in% colnames(trace)) stop("First column must be 'Time'")
trace_long <- trace %>%
pivot_longer(cols = -Time, names_to = "Variable", values_to = "Value")
# Ensure only one variable to match reference style
if (length(unique(trace_long$Variable)) > 1) {
warning("Multiple variables detected. Only the first one will be plotted.")
trace_long <- trace_long %>% filter(Variable == unique(Variable)[1])
}
ggplot(trace_long, aes(x = Time, y = Value)) +
geom_area(fill = fill_color, alpha = 0.10) +
geom_line(color = line_color, size = line_size) +
labs(title = title, x = NULL, y = ylab) +
theme_minimal(base_size = text_size) +
theme(
plot.title = element_text(face = "bold", size = text_size + 2, hjust = 0),
axis.title.y = element_text(face = "bold", color = "#444444"),
axis.text = element_text(color = "#444444"),
panel.grid.major = element_line(color = "gray85", size = 0.3),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "#f8f9fa", color = NA),
legend.position = "none"
)
}
# Basic visualization - automatically detects all variables
plot_trace_dashboard(file.path(wd, paste0(net_name, "_analysis", "/", net_name, "-analysis-1.trace")),
title = "Schlögl Model Dynamics")
library(ggplot2)
library(dplyr)
library(tidyr)
# Dashboard-style time series plot
plot_trace_dashboard <- function(trace_file,
title = NULL,
ylab = NULL,
line_color = "darkred",   # dark green
fill_color = "red",   # light green
line_size = 1.2,
text_size = 14) {
# Load and reshape data
trace <- read.table(trace_file, header = TRUE, sep = "", dec = ".")
if (!"Time" %in% colnames(trace)) stop("First column must be 'Time'")
trace_long <- trace %>%
pivot_longer(cols = -Time, names_to = "Variable", values_to = "Value")
# Ensure only one variable to match reference style
if (length(unique(trace_long$Variable)) > 1) {
warning("Multiple variables detected. Only the first one will be plotted.")
trace_long <- trace_long %>% filter(Variable == unique(Variable)[1])
}
ggplot(trace_long, aes(x = Time, y = Value)) +
geom_area(fill = fill_color, alpha = 0.075) +
geom_line(color = line_color, size = line_size) +
labs(title = title, x = NULL, y = ylab) +
theme_minimal(base_size = text_size) +
theme(
plot.title = element_text(face = "bold", size = text_size + 2, hjust = 0),
axis.title.y = element_text(face = "bold", color = "#444444"),
axis.text = element_text(color = "#444444"),
panel.grid.major = element_line(color = "gray85", size = 0.3),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "#f8f9fa", color = NA),
legend.position = "none"
)
}
# Basic visualization - automatically detects all variables
plot_trace_dashboard(file.path(wd, paste0(net_name, "_analysis", "/", net_name, "-analysis-1.trace")),
title = "Schlögl Model Dynamics")
library(epimod)
# downloadContainers()
wd = getwd()
input_dir = file.path(wd, "input")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[3])
solver_dir = paste0(input_dir, "/", net_name)
if( !dir.exists(solver_dir) ) {
dir.create(solver_dir)
}
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")))
files_to_move <- grep(list.files(pattern = paste0(net_name, "."), full.names = F), pattern='main', invert=TRUE, value=TRUE)
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(solver_dir, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
model.analysis(solver_fname = file.path(wd, "input", net_name, paste0(net_name, ".solver")),
debug = T,
f_time = 25,
s_time = 1,
i_time = 0)
# Files to check and remove
files_to_check <- c("ExitStatusFile", list.files(pattern = "\\.log$"), list.files(pattern = "DockerID"))
# Filter to only existing files
files_to_remove <- files_to_check[file.exists(files_to_check)]
# Remove the files if they exist
if (length(files_to_remove) > 0) {
file.remove(files_to_remove)
cat("Removed", length(files_to_remove), "files:", paste(files_to_remove, collapse=", "), "\n")
} else {
cat("No matching files found in working directory.\n")
}
# Read your trace file
trace <- read.table(,
header = TRUE, sep = "", dec = ".")
# Basic visualization - automatically detects all variables
plot_trace_dashboard(file.path(wd, paste0(net_name, "_analysis", "/", net_name, "-analysis-1.trace")),
title = "Schlögl Model Dynamics")
library(ggplot2)
library(dplyr)
library(tidyr)
# Dashboard-style time series plot
plot_trace_dashboard <- function(trace_file,
title = NULL,
ylab = NULL,
line_color = "darkred",   # dark green
fill_color = "red",   # light green
line_size = 1.2,
text_size = 14) {
# Load and reshape data
trace <- read.table(trace_file, header = TRUE, sep = "", dec = ".")
if (!"Time" %in% colnames(trace)) stop("First column must be 'Time'")
trace_long <- trace %>%
pivot_longer(cols = -Time, names_to = "Variable", values_to = "Value")
# Ensure only one variable to match reference style
if (length(unique(trace_long$Variable)) > 1) {
warning("Multiple variables detected. Only the first one will be plotted.")
trace_long <- trace_long %>% filter(Variable == unique(Variable)[1])
}
ggplot(trace_long, aes(x = Time, y = Value)) +
geom_area(fill = fill_color, alpha = 0.075) +
geom_line(color = line_color, size = line_size) +
labs(title = title) +
theme_minimal(base_size = text_size) +
theme(
plot.title = element_text(face = "bold", size = text_size + 2, hjust = 0),
axis.title.y = element_text(face = "bold", color = "#444444"),
axis.text = element_text(color = "#444444"),
panel.grid.major = element_line(color = "gray85", size = 0.3),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "#f8f9fa", color = NA),
legend.position = "none"
)
}
library(ggplot2)
library(dplyr)
library(tidyr)
# Dashboard-style time series plot
plot_trace_dashboard <- function(trace_file,
title = NULL,
ylab = NULL,
line_color = "darkred",   # dark green
fill_color = "red",   # light green
line_size = 1.2,
text_size = 14) {
# Load and reshape data
trace <- read.table(trace_file, header = TRUE, sep = "", dec = ".")
if (!"Time" %in% colnames(trace)) stop("First column must be 'Time'")
trace_long <- trace %>%
pivot_longer(cols = -Time, names_to = "Variable", values_to = "Value")
# Ensure only one variable to match reference style
if (length(unique(trace_long$Variable)) > 1) {
warning("Multiple variables detected. Only the first one will be plotted.")
trace_long <- trace_long %>% filter(Variable == unique(Variable)[1])
}
ggplot(trace_long, aes(x = Time, y = Value)) +
geom_area(fill = fill_color, alpha = 0.075) +
geom_line(color = line_color, size = line_size) +
labs(title = title) +
theme_minimal(base_size = text_size) +
theme(
plot.title = element_text(face = "bold", size = text_size + 2, hjust = 0),
axis.title.y = element_text(face = "bold", color = "#444444"),
axis.text = element_text(color = "#444444"),
panel.grid.major = element_line(color = "gray85", size = 0.3),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "#f8f9fa", color = NA),
legend.position = "none"
)
}
# Basic visualization - automatically detects all variables
plot_trace_dashboard(trace_file = file.path(wd, paste0(net_name, "_analysis", "/", net_name, "-analysis-1.trace")),
title = "Schlögl Model Dynamics",
subtitle = "Trace data",
ylab = "Value",
ylab = "Time",
line_color = "#1b7837",   # dark green
fill_color = "#a6dba0",   # light green
line_size = 1.2,
text_size = 14)
plot_trace_dashboard <- function(trace_file,
title = "Visitors Over Time",
subtitle = "Trace data from simulation",
ylab = "Value",
line_color = "#1b7837",   # dark green
fill_color = "#a6dba0",   # light green
line_size = 1.2,
text_size = 14) {
# Required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Load and reshape data
trace <- read.table(trace_file, header = TRUE, sep = "", dec = ".")
if (!"Time" %in% colnames(trace)) stop("First column must be 'Time'")
trace_long <- trace %>%
pivot_longer(cols = -Time, names_to = "Variable", values_to = "Value")
# If multiple variables, use only the first for dashboard-style plot
if (length(unique(trace_long$Variable)) > 1) {
warning("Multiple variables detected. Only the first will be plotted.")
trace_long <- trace_long %>% filter(Variable == unique(Variable)[1])
}
# Create the plot
ggplot(trace_long, aes(x = Time, y = Value)) +
geom_area(fill = fill_color, alpha = 0.075) +
geom_line(color = line_color, size = line_size) +
labs(
title = title,
subtitle = subtitle,
x = xlab,
y = ylab
) +
theme_minimal(base_size = text_size) +
theme(
plot.title = element_text(face = "bold", size = text_size + 2, hjust = 0),
plot.subtitle = element_text(color = "gray40", size = text_size - 2, hjust = 0),
axis.title.y = element_text(face = "bold", color = "#444444"),
axis.text = element_text(color = "#444444"),
panel.grid.major = element_line(color = "gray85", size = 0.3),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "#f8f9fa", color = NA),
legend.position = "none"
)
}
# Basic visualization - automatically detects all variables
plot_trace_dashboard(trace_file = file.path(wd, paste0(net_name, "_analysis", "/", net_name, "-analysis-1.trace")),
title = "Schlögl Model Dynamics",
subtitle = "Trace data",
ylab = "Value",
xlab = "Time",
line_color = "#1b7837",   # dark green
fill_color = "#a6dba0",   # light green
line_size = 1.2,
text_size = 14)
plot_trace_dashboard <- function(trace_file,
title = "Visitors Over Time",
subtitle = "Trace data from simulation",
ylab = "Value",
xlab = "Value",
line_color = "#1b7837",   # dark green
fill_color = "#a6dba0",   # light green
line_size = 1.2,
text_size = 14) {
# Required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Load and reshape data
trace <- read.table(trace_file, header = TRUE, sep = "", dec = ".")
if (!"Time" %in% colnames(trace)) stop("First column must be 'Time'")
trace_long <- trace %>%
pivot_longer(cols = -Time, names_to = "Variable", values_to = "Value")
# If multiple variables, use only the first for dashboard-style plot
if (length(unique(trace_long$Variable)) > 1) {
warning("Multiple variables detected. Only the first will be plotted.")
trace_long <- trace_long %>% filter(Variable == unique(Variable)[1])
}
# Create the plot
ggplot(trace_long, aes(x = Time, y = Value)) +
geom_area(fill = fill_color, alpha = 0.075) +
geom_line(color = line_color, size = line_size) +
labs(
title = title,
subtitle = subtitle,
x = xlab,
y = ylab
) +
theme_minimal(base_size = text_size) +
theme(
plot.title = element_text(face = "bold", size = text_size + 2, hjust = 0),
plot.subtitle = element_text(color = "gray40", size = text_size - 2, hjust = 0),
axis.title.y = element_text(face = "bold", color = "#444444"),
axis.text = element_text(color = "#444444"),
panel.grid.major = element_line(color = "gray85", size = 0.3),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "#f8f9fa", color = NA),
legend.position = "none"
)
}
# Basic visualization - automatically detects all variables
plot_trace_dashboard(trace_file = file.path(wd, paste0(net_name, "_analysis", "/", net_name, "-analysis-1.trace")),
title = "Schlögl Model Dynamics",
subtitle = "Trace data",
ylab = "Value",
xlab = "Time",
line_color = "#1b7837",   # dark green
fill_color = "#a6dba0",   # light green
line_size = 1.2,
text_size = 14)
plot_trace_dashboard <- function(trace_file,
title = "Visitors Over Time",
subtitle = "Trace data from simulation",
ylab = "Value",
xlab = "Value",
line_color = "darkred",   # dark green
fill_color = "red",   # light green
line_size = 1.2,
text_size = 14) {
# Required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Load and reshape data
trace <- read.table(trace_file, header = TRUE, sep = "", dec = ".")
if (!"Time" %in% colnames(trace)) stop("First column must be 'Time'")
trace_long <- trace %>%
pivot_longer(cols = -Time, names_to = "Variable", values_to = "Value")
# If multiple variables, use only the first for dashboard-style plot
if (length(unique(trace_long$Variable)) > 1) {
warning("Multiple variables detected. Only the first will be plotted.")
trace_long <- trace_long %>% filter(Variable == unique(Variable)[1])
}
# Create the plot
ggplot(trace_long, aes(x = Time, y = Value)) +
geom_area(fill = fill_color, alpha = 0.075) +
geom_line(color = line_color, size = line_size) +
labs(
title = title,
subtitle = subtitle,
x = xlab,
y = ylab
) +
theme_minimal(base_size = text_size) +
theme(
plot.title = element_text(face = "bold", size = text_size + 2, hjust = 0),
plot.subtitle = element_text(color = "gray40", size = text_size - 2, hjust = 0),
axis.title.y = element_text(face = "bold", color = "#444444"),
axis.text = element_text(color = "#444444"),
panel.grid.major = element_line(color = "gray85", size = 0.3),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = NA),
plot.background = element_rect(fill = "#f8f9fa", color = NA),
legend.position = "none"
)
}
# Basic visualization - automatically detects all variables
plot_trace_dashboard(trace_file = file.path(wd, paste0(net_name, "_analysis", "/", net_name, "-analysis-1.trace")),
title = "Schlögl Model Dynamics",
subtitle = "Trace data",
ylab = "Value",
xlab = "Time",
line_color = "#1b7837",   # dark green
fill_color = "#a6dba0",   # light green
line_size = 1.2,
text_size = 14)
source(file.path("functions/visualize_dynamics.R"))
library(epimod)
# downloadContainers()
wd = getwd()
input_dir = file.path(wd, "input")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[3])
solver_dir = paste0(input_dir, "/", net_name)
if( !dir.exists(solver_dir) ) {
dir.create(solver_dir)
}
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")))
files_to_move <- grep(list.files(pattern = paste0(net_name, "."), full.names = F), pattern='main', invert=TRUE, value=TRUE)
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(solver_dir, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
model.analysis(solver_fname = file.path(wd, "input", net_name, paste0(net_name, ".solver")),
debug = T,
f_time = 15,
s_time = 1,
i_time = 0)
# Files to check and remove
files_to_check <- c("ExitStatusFile", list.files(pattern = "\\.log$"), list.files(pattern = "DockerID"))
# Filter to only existing files
files_to_remove <- files_to_check[file.exists(files_to_check)]
# Remove the files if they exist
if (length(files_to_remove) > 0) {
file.remove(files_to_remove)
cat("Removed", length(files_to_remove), "files:", paste(files_to_remove, collapse=", "), "\n")
} else {
cat("No matching files found in working directory.\n")
}
source(file.path("functions/visualize_dynamics.R"))
# Basic visualization - automatically detects all variables
plot_trace_dashboard(trace_file = file.path(wd, paste0(net_name, "_analysis", "/", net_name, "-analysis-1.trace")),
title = "Schlögl Model Dynamics",
subtitle = "Trace data",
ylab = "Value",
xlab = "Time",
line_color = "#1b7837",   # dark green
fill_color = "#a6dba0",   # light green
line_size = 1.2,
text_size = 14)
# Basic visualization - automatically detects all variables
plot_trace_dashboard(trace_file = file.path(wd, paste0(net_name, "_analysis", "/", net_name, "-analysis-1.trace")),
title = "Schlögl Model Dynamics",
subtitle = "Trace data",
ylab = "Value",
xlab = "Time",
line_color = "darkred",
fill_color = "red",   # light green
line_size = 1.2,
text_size = 14)
net_name
file.path("plots/", net_name)
file.path("plots/", net_name, "dynamics.pdf")
ggsave(file.path("plots/",paste0( net_name, "dynamics.pdf")), height = 6, width = 6)
ggsave(file.path("plots/",paste0( net_name, "dynamics.pdf")), height = 3, width = 3)
ggsave(file.path("plots/",paste0( net_name, "dynamics.pdf")), height = 3, width = 4)
