library(epimod)
# downloadContainers()
wd = getwd()
input_dir = file.path(wd, "input")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[3])
solver_dir = paste0(input_dir, "/", net_name)
if( !dir.exists(solver_dir) ) {
dir.create(solver_dir)
}
files_to_move <- grep(list.files(pattern = net_name, full.names = F), pattern='main', invert=TRUE, value=TRUE)
setwd("~/Git_Repositories/Schlogl_model")
library(epimod)
# downloadContainers()
wd = getwd()
input_dir = file.path(wd, "input")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[3])
solver_dir = paste0(input_dir, "/", net_name)
if( !dir.exists(solver_dir) ) {
dir.create(solver_dir)
}
files_to_move <- grep(list.files(pattern = net_name, full.names = F), pattern='main', invert=TRUE, value=TRUE)
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(solver_dir, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
library(epimod)
# downloadContainers()
wd = getwd()
input_dir = file.path(wd, "input")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[3])
solver_dir = paste0(input_dir, "/", net_name)
if( !dir.exists(solver_dir) ) {
dir.create(solver_dir)
}
files_to_move <- grep(list.files(pattern = net_name, full.names = F), pattern='main', invert=TRUE, value=TRUE)
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(solver_dir, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
library(epimod)
wd = getwd()
input_dir = file.path(wd, "input")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[3])
solver_dir = paste0(input_dir, "/", net_name)
if( !dir.exists(solver_dir) ) {
dir.create(solver_dir)
}
files_to_move <- grep(list.files(pattern = net_name, full.names = F), pattern='main', invert=TRUE, value=TRUE)
files_to_move
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")))
files_to_move <- grep(list.files(pattern = net_name, full.names = F), pattern='main', invert=TRUE, value=TRUE)
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(solver_dir, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
files_to_move
paste0(net_name, ".")
files_to_move <- grep(list.files(pattern = paste0(net_name, "."), full.names = F), pattern='main', invert=TRUE, value=TRUE)
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(solver_dir, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
files_to_move
files_to_move <- grep(list.files(pattern = paste0(net_name, "."), full.names = F), pattern='main', invert=TRUE, value=TRUE)
files_to_move
library(epimod)
# downloadContainers()
wd = getwd()
input_dir = file.path(wd, "input")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[3])
solver_dir = paste0(input_dir, "/", net_name)
if( !dir.exists(solver_dir) ) {
dir.create(solver_dir)
}
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")))
files_to_move <- grep(list.files(pattern = paste0(net_name, "."), full.names = F), pattern='main', invert=TRUE, value=TRUE)
files_to_move
files_to_move <- grep(list.files(pattern = paste0(net_name, "."), full.names = F), pattern='main', invert=TRUE, value=TRUE)
files_to_move
solver_dir
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(solver_dir, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
file.path(wd, "input", net_name, "functions", paste0(net_name, "_Rfunctions.R"))
file.path(wd, "input", net_name, "functions_analysis.csv")
path.data="./Schlogl_reduced/KineticsParameters"
read.table(path.data, sep = "\n")
read.table(path.data, sep = "\n")
read.table(path.data)
read.table(path.data)
kp = read.table(path.data, sep = "\n")
kp
n = 1
k = kp[n, ]
k
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = file.path(wd, "input", net_name, "functions_analysis.csv"),
functions_fname = file.path(wd, "input", net_name, "functions", paste0(net_name, "_Rfunctions.R")),
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
file.path(wd, "input", net_name, "functions", paste0(net_name, "_Rfunctions.R"))
file.path(wd, "input", "functions", paste0(net_name, "_Rfunctions.R"))
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = file.path(wd, "input", net_name, "functions_analysis.csv"),
functions_fname = file.path(wd, "input", "functions", paste0(net_name, "_Rfunctions.R")),
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = file.path("input", net_name, "functions_analysis.csv"),
functions_fname = file.path(wd, "input", "functions", paste0(net_name, "_Rfunctions.R")),
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = "input/Schlogl_general/Schlogl_general_analysis/Schlogl_general_Rfunctions.R",
functions_fname = file.path(wd, "input", "functions", paste0(net_name, "_Rfunctions.R")),
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
file.path(wd, "input", net_name, "functions_analysis.csv")
file.path(wd, "input", "functions", paste0(net_name, "_Rfunctions.R"))
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = file.path(wd, "input", net_name, "functions_analysis.csv"),
functions_fname = file.path(wd, "input", "functions", paste0(net_name, "_Rfunctions.R")),
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = file.path(wd, "input", net_name, "functions_analysis.csv"),
functions_fname = "input/Schlogl_general/Schlogl_general_analysis/Schlogl_general_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
file.path(wd, "input", net_name, "functions_analysis.csv")
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = "input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "input/Schlogl_general/Schlogl_general_analysis/Schlogl_general_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
init.gen <- function() {
# places' names
yini.names <- "X1"
# initial marking
y_ini <- c(250)
names(y_ini) <- yini.names
y_ini = y_ini[yini.names]
return(y_ini)
}
init.gen
init.gen()
kinetic_parameters = function(n, path.data) {
kp = read.table(path.data, sep = "\n")
k = kp[n, ]
}
kinetic_parameters(n = 1, path.data="./Schlogl_reduced/KineticsParameters")
kinetic_parameters = function(n, path.data) {
kp = read.table(path.data, sep = "\n")
k = kp[n, ]
retur(k)
}
kinetic_parameters(n = 1, path.data="./Schlogl_reduced/KineticsParameters")
kinetic_parameters = function(n, path.data) {
kp = read.table(path.data, sep = "\n")
k = kp[n, ]
return(k)
}
kinetic_parameters(n = 1, path.data="./Schlogl_reduced/KineticsParameters")
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = "input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "input/Schlogl_general/Schlogl_general_analysis/Schlogl_general_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
kp = read.table(path.data, sep = "\n")
path.data="./Schlogl_reduced/KineticsParameters"
kp = read.table(path.data, sep = "\n")
# Read the file content
content <- readLines("./Schlogl_reduced/KineticsParameters")
# Write it back with a guaranteed newline at the end
writeLines(content, "./Schlogl_reduced/KineticsParameters")
# Read the file content
content <- readLines("./Schlogl_reduced/KineticsParameters")
# Write it back with a guaranteed newline at the end
writeLines(content, "./Schlogl_reduced/KineticsParameters")
file.info("./Schlogl_reduced/KineticsParameters")$writable
# Read the file
content <- readLines("./Schlogl_reduced/KineticsParameters")
# Write to a new location where you have permission
writeLines(content, "KineticsParameters_fixed")
# Read the file
content <- readLines("./input/Schlogl_reduced/KineticsParameters")
content
# Write to a new location where you have permission
writeLines(content, "./input/Schlogl_reduced/KineticsParameters_fixed")
# Read the file
content <- readLines("./input/Schlogl_reduced/KineticsParameters")
# Write to a new location where you have permission
writeLines(content, "./input/Schlogl_reduced/KineticsParameters")
path.data="./input/Schlogl_reduced/KineticsParameters"
content <- readLines(path.data)
path.data="./input/Schlogl_reduced/KineticsParameters"
content <- readLines(path.data)
# Write to a new location where you have permission
writeLines(content, path.data)
kp = read.table(path.data, sep = "\n")
kp
library(epimod)
# downloadContainers()
wd = getwd()
input_dir = file.path(wd, "input")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[3])
solver_dir = paste0(input_dir, "/", net_name)
if( !dir.exists(solver_dir) ) {
dir.create(solver_dir)
}
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")))
files_to_move <- grep(list.files(pattern = paste0(net_name, "."), full.names = F), pattern='main', invert=TRUE, value=TRUE)
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(solver_dir, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = "input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "input/Schlogl_general/Schlogl_general_analysis/Schlogl_general_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = "./input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./input/Schlogl_general/Schlogl_general_analysis/Schlogl_general_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = "./input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./input/Schlogl_reduced/Schlogl_general_analysis/Schlogl_general_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = "./input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./input/Schlogl_reduced/functions/Schlogl_reduced_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = "./input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./functions/Schlogl_reduced_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
model.analysis(solver_fname = file.path(solver_dir, paste0(net_name, ".solver")),
parameters_fname = "./input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./functions/Schlogl_reduced_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
file.path(solver_dir, paste0(net_name, ".solver")
)
library(epimod)
# downloadContainers()
wd = getwd()
input_dir = file.path(wd, "input")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[3])
solver_dir = paste0(input_dir, "/", net_name)
if( !dir.exists(solver_dir) ) {
dir.create(solver_dir)
}
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")))
files_to_move <- grep(list.files(pattern = paste0(net_name, "."), full.names = F), pattern='main', invert=TRUE, value=TRUE)
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(solver_dir, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
model.analysis(solver_fname = "./input/Schlogl_reduced/Schlogl_reduced.solver",
parameters_fname = "./input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./functions/Schlogl_reduced_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
library(epimod)
# downloadContainers()
wd = getwd()
input_dir = file.path(wd, "input")
nets_list = list.files(file.path(wd, "net"))
net_name = gsub(".PNPRO", "", nets_list[3])
solver_dir = paste0(input_dir, "/", net_name)
if( !dir.exists(solver_dir) ) {
dir.create(solver_dir)
}
model.generation(net_fname = file.path(wd, "net", paste0(net_name, ".PNPRO")))
files_to_move <- grep(list.files(pattern = paste0(net_name, "."), full.names = F), pattern='main', invert=TRUE, value=TRUE)
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(solver_dir, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
model.analysis(solver_fname = "./input/Schlogl_reduced/Schlogl_reduced.solver",
parameters_fname = "./input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./functions/Schlogl_reduced_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
path.data="./input/Schlogl_reduced/KineticsParameters"
content <- readLines(path.data)
content
as.double(content)
as.matrix(as.double(content))
parameters = as.matrix(as.double(content))
parameters
model.analysis(solver_fname = "./input/Schlogl_reduced/Schlogl_reduced.solver",
parameters_fname = "./input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./functions/Schlogl_reduced_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
model.analysis(solver_fname = "./input/Schlogl_reduced/Schlogl_reduced.solver",
parameters_fname = "input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./functions/Schlogl_reduced_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
model.analysis(solver_fname = "./input/Schlogl_reduced/Schlogl_reduced.solver",
parameters_fname = "input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./functions/Schlogl_reduced_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
model.analysis(solver_fname = "./input/Schlogl_reduced/Schlogl_reduced.solver",
parameters_fname = "input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./functions/Schlogl_reduced_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
model.analysis(solver_fname = "./input/Schlogl_reduced/Schlogl_reduced.solver",
parameters_fname = "input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./functions/Schlogl_reduced_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
model.analysis(solver_fname = "./input/Schlogl_reduced/Schlogl_reduced.solver",
parameters_fname = "input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./functions/Schlogl_reduced_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
# path.data="./input/Schlogl_reduced/KineticsParameters"
content <- readLines(path.data)
content
as.double(content)
test = function() {
content = c(3.0e-07, 1.0e-04, 1.0e-03, 3.5e+00)
return(content)
}
test = function() {
content = as.matrix(c(3.0e-07, 1.0e-04, 1.0e-03, 3.5e+00))
return(content)
}
test
test()
model.analysis(solver_fname = "./input/Schlogl_reduced/Schlogl_reduced.solver",
parameters_fname = "input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./functions/Schlogl_reduced_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
load("~/Git_Repositories/Schlogl_model/Schlogl_reduced_analysis/seeds-Schlogl_reduced-analysis.RData")
t = load("~/Git_Repositories/Schlogl_model/Schlogl_reduced_analysis/seeds-Schlogl_reduced-analysis.RData")
load("~/Git_Repositories/Schlogl_model/Schlogl_reduced_analysis/Schlogl_reduced-analysis.RData")
View(config)
View(test)
model.analysis(solver_fname = "./input/Schlogl_reduced/Schlogl_reduced.solver",
parameters_fname = "input/Schlogl_reduced/functions_analysis.csv",
functions_fname = "./functions/Schlogl_reduced_Rfunctions.R",
debug = T,
f_time = 100,
s_time = 1,
i_time = 0)
load("~/Git_Repositories/Schlogl_model/Schlogl_reduced_analysis/Schlogl_reduced-analysis.RData")
View(config)
